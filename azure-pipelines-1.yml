trigger:
- main  # Trigger pipeline on changes to the 'main' branch

variables:
- group: TerraformVars  # Reference the variable group

stages:
# Stage 1: Deploy to Dev
- stage: Dev
  displayName: "Deploy to Dev"
  jobs:
  - job: terraform_ci
    displayName: "Terraform Init, Validate, and Plan"
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - checkout: self


      - task: Bash@3
        displayName: "Install Azure CLI"
        inputs:
          targetType: 'inline'
          script: |
            curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
            az --version

      - task: Bash@3
        displayName: "Install Terraform"
        inputs:
          targetType: 'inline'
          script: |
            T_VERSION="1.9.8"
            curl -O https://releases.hashicorp.com/terraform/${T_VERSION}/terraform_${T_VERSION}_linux_amd64.zip
            unzip terraform_${T_VERSION}_linux_amd64.zip
            sudo mv terraform /usr/local/bin/
            terraform -version

      - task: AzureCLI@2
        inputs:
              azureSubscription: "$(azureServiceConnection)"
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az login

      - task: Bash@3
        displayName: "Terraform Init/Plan/validate"
        inputs:
          targetType: 'inline'
          script: |
            cd terraform/dev 
            ls



              # terraform init -lock=false
              # terraform validate -no-color
              # terraform plan -no-color -input=false -lock=false


      # - task: Bash@3
      #   displayName: "Terraform Validate"
      #   inputs:
      #     targetType: 'inline'
      #     script: |
      #       terraform validate -no-color

      # - task: Bash@3
      #   displayName: "Terraform Plan"
      #   inputs:
      #     targetType: 'inline'
      #     script: |
      #       terraform plan -no-color -input=false -lock=false
      #   env:
      #     TF_VAR_sql_admin_user: $(TF_VAR_ai_endpoint)
      #     TF_VAR_sql_admin_password: $(TF_VAR_ai_key)





# # Stage 2: Deploy to Prod
# - stage: Prod
#   displayName: "Deploy to Production Environment"
#   dependsOn: Dev  # Ensure Dev stage is completed first
#   condition: succeeded()  # Run only if Dev stage succeeds
#   approval:
#     - name: "Manual Approval for Prod"
#       instructions: "Approve this stage to deploy to Production."
#       reviewers:
#         - your.team@organization.com  # Replace with actual email addresses or Azure DevOps group

#   jobs:
#   - job: DeployProd
#     displayName: "Deploy Infrastructure to Prod"
#     steps:
#     - task: UsePythonVersion@0
#       displayName: "Set Python Version"
#       inputs:
#         versionSpec: "3.x"

#     - task: Checkout@1
#       displayName: "Checkout Repository"
#       inputs:
#         fetchDepth: 1

#     - task: TerraformInstaller@0
#       displayName: "Install Terraform"
#       inputs:
#         terraformVersion: $(terraformVersion)

#     - script: |
#         cd $(prodFolder)
#         terraform init -backend-config=$(prodBackendConfig)
#       displayName: "Initialize Terraform for Prod"

#     - script: |
#         cd $(prodFolder)
#         terraform validate
#       displayName: "Validate Terraform for Prod"

#     - script: |
#         cd $(prodFolder)
#         terraform plan -out=tfplan
#       displayName: "Generate Terraform Plan for Prod"
#       env:
#         ARM_CLIENT_ID: $(servicePrincipalId)
#         ARM_CLIENT_SECRET: $(servicePrincipalKey)
#         ARM_SUBSCRIPTION_ID: $(subscriptionId)
#         ARM_TENANT_ID: $(tenantId)

#     - script: |
#         cd $(prodFolder)
#         terraform apply -auto-approve tfplan
#       displayName: "Apply Terraform Plan for Prod"
#       env:
#         ARM_CLIENT_ID: $(servicePrincipalId)
#         ARM_CLIENT_SECRET: $(servicePrincipalKey)
#         ARM_SUBSCRIPTION_ID: $(subscriptionId)
#         ARM_TENANT_ID: $(tenantId)

#     - script: |
#         az functionapp config appsettings set \
#           --name $(prodFunctionAppName) \
#           --resource-group $(resourceGroupName) \
#           --settings \
#             APP_ENV=$(prod_APP_ENV) \
#             LOG_LEVEL=$(prod_LOG_LEVEL) \
#             FEATURE_FLAG=$(prod_FEATURE_FLAG)
#       displayName: "Set Secret Environment Variables for Prod Function App"
