trigger:
  branches:
    include:
      - dev

variables:
- group: TerraformVars  

 
stages:

  - stage: Build
    displayName: "Build Application"
    jobs:
      - job: BuildFunctionApp
        displayName: "Build Azure Function App"
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - checkout: self
            displayName: "Checkout Code"

          - task: UsePythonVersion@0
            inputs:
              versionSpec: "3.x"
              addToPath: true
            displayName: "Set up Python"

          - script: |
              echo "Installing dependencies..."
              pip install -r requirements.txt
            displayName: "Install Dependencies"

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)'
              artifactName: 'function-app-artifact'
              publishLocation: 'pipeline'
            displayName: "Publish Artifact"



# Stage 1: Deploy TF Infrastructure for Dev
  - stage: Dev_Infra
    displayName: "Deploy TF Infra for Dev"
    jobs:
    - job: Terraform_Dev
      displayName: "Deploying Dev env"
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - checkout: self


        - task: Bash@3
          displayName: "Install Azure CLI"
          inputs:
            targetType: 'inline'
            script: |
              curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
              az --version

        - task: Bash@3
          displayName: "Azure Login with Service Principal"
          inputs:
            targetType: 'inline'
            script: |
              az login --service-principal \
                --username $(ARM_CLIENT_ID) \
                --password $(ARM_CLIENT_SECRET) \
                --tenant $(ARM_TENANT_ID)
              az account set --subscription $(ARM_SUBSCRIPTION_ID)
              az account show
          env:
            ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
            ARM_CLIENT_ID: $(ARM_CLIENT_ID)
            ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
            ARM_TENANT_ID: $(ARM_TENANT_ID)


        - task: TerraformInstaller@0
          inputs:
            terraformVersion: '1.9.8'

        - task: Bash@3
          displayName: 'Run Terraform Commands'
          inputs:
            targetType: 'inline'
            script: |
              cd terraform/Dev 
              pwd
              ls
              terraform init -lock=false
              terraform validate -no-color
              terraform plan -no-color -input=false
              terraform apply --auto-approve
          env:
              TF_VAR_TELEGRAM_BOT_TOKEN: $(TF_VAR_TELEGRAM_BOT_TOKEN)
              TF_VAR_TELEGRAM_CHAT_ID: $(TF_VAR_TELEGRAM_CHAT_ID)
              TF_VAR_DISCORD_WEBHOOK_URL: $(TF_VAR_DISCORD_WEBHOOK_URL)
              TF_VAR_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
              TF_VAR_CLIENT_ID: $(ARM_CLIENT_ID)
              TF_VAR_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              TF_VAR_TENANT_ID: $(ARM_TENANT_ID)
              ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
              ARM_CLIENT_ID: $(ARM_CLIENT_ID)
              ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              ARM_TENANT_ID: $(ARM_TENANT_ID)


  - stage: Approval
    displayName: "Manual Approval for Development"
    dependsOn: Dev_Infra
    jobs:
      - job: Approval
        steps:
          - script: echo "Waiting for manual approval"
            displayName: "Manual Approval Step"


  - stage: DeployFuncToDev
    displayName: "Deploy Function to Development"
    dependsOn: Approval
    jobs:
      - deployment: Deploy
        environment: "Dev"
        strategy:
          runOnce:
            deploy:
              steps:
              - task: DownloadPipelineArtifact@2
                inputs:
                  artifactName: 'function-app-artifact'
                  targetPath: "$(artifactPath)"
                displayName: "Download Artifact"

              - task: Bash@3
                displayName: "Install Azure CLI"
                inputs:
                  targetType: 'inline'
                  script: |
                    curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
                    az --version

              - task: Bash@3
                displayName: "Azure Login with Service Principal"
                inputs:
                  targetType: 'inline'
                  script: |
                    az login --service-principal \
                      --username $(ARM_CLIENT_ID) \
                      --password $(ARM_CLIENT_SECRET) \
                      --tenant $(ARM_TENANT_ID)
                    az account set --subscription $(ARM_SUBSCRIPTION_ID)
                    az account show
                env:
                  ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
                  ARM_CLIENT_ID: $(ARM_CLIENT_ID)
                  ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
                  ARM_TENANT_ID: $(ARM_TENANT_ID)


              - task: Bash@3
                displayName: "Deploy Function App to Dev"
                inputs:
                  targetType: 'inline'
                  script: |
                    echo "Starting the Prod Function App..."
                    az functionapp start --name $(devFunctionAppName) --resource-group $(resourceGroup)
                    pwd
                    ls
                    
                    echo "cd to app "
                    cd app/artifact/app

                    ls
                    pwd
      
                    echo "Installing Azure Functions Core Tools..."
                    npm install -g azure-functions-core-tools@4 --unsafe-perm true
                    
                     
                    echo "Deploying Azure Function App to Prod..."
                    func azure functionapp publish $(devFunctionAppName) --python 


