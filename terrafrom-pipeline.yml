trigger:
  branches:
    include:
      - main
      - dev

variables:
- group: TerraformVars  

stages:
# Stage 1: Deploy to Dev
- stage: Dev
  displayName: "Deploy to Dev"
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/dev')
  jobs:
  - job: Terraform_Dev
    displayName: "Deploying Dev env"
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - checkout: self


      - task: Bash@3
        displayName: "Install Azure CLI"
        inputs:
          targetType: 'inline'
          script: |
            curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
            az --version

      - task: Bash@3
        displayName: "Azure Login with Service Principal"
        inputs:
          targetType: 'inline'
          script: |
            az login --service-principal \
              --username $(ARM_CLIENT_ID) \
              --password $(ARM_CLIENT_SECRET) \
              --tenant $(ARM_TENANT_ID)
            az account set --subscription $(ARM_SUBSCRIPTION_ID)
            az account show
        env:
          ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
          ARM_CLIENT_ID: $(ARM_CLIENT_ID)
          ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
          ARM_TENANT_ID: $(ARM_TENANT_ID)


      - task: TerraformInstaller@0
        inputs:
          terraformVersion: '1.9.8'



      - task: Bash@3
        displayName: 'Run Terraform Commands'
        inputs:
          targetType: 'inline'
          script: |
            cd terraform/Dev 
            pwd
            ls
            terraform init -lock=false
            terraform validate -no-color
            terraform plan -no-color -input=false
            terraform apply --auto-approve
        env:
            TF_VAR_TELEGRAM_BOT_TOKEN: $(TF_VAR_TELEGRAM_BOT_TOKEN)
            TF_VAR_TELEGRAM_CHAT_ID: $(TF_VAR_TELEGRAM_CHAT_ID)
            TF_VAR_DISCORD_WEBHOOK_URL: $(TF_VAR_DISCORD_WEBHOOK_URL)
            TF_VAR_subscription_id: $(ARM_SUBSCRIPTION_ID)
            TF_VAR_client_id: $(ARM_CLIENT_ID)
            TF_VAR_client_secret: $(ARM_CLIENT_SECRET)
            TF_VAR_tenant_id: $(ARM_TENANT_ID)

# Stage 2: Deploy to Prod
- stage: Prod
  displayName: "Deploy to Production Environment"
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
  dependsOn: Dev  
  jobs:
    - deployment: Terrafrom_Prod
      displayName: "Deploying Prod env"
      pool:
        vmImage: 'ubuntu-latest'
      environment:
            name: 'Prod'  
      strategy:
        runOnce:
          deploy:
            steps:
                  - checkout: self

                  - task: Bash@3
                    displayName: "Install Azure CLI"
                    inputs:
                      targetType: 'inline'
                      script: |
                        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
                        az --version

                  - task: Bash@3
                    displayName: "Azure Login with Service Principal"
                    inputs:
                      targetType: 'inline'
                      script: |
                        az login --service-principal \
                          --username $(ARM_CLIENT_ID) \
                          --password $(ARM_CLIENT_SECRET) \
                          --tenant $(ARM_TENANT_ID)
                        az account set --subscription $(ARM_SUBSCRIPTION_ID)
                        az account show
                    env:
                      ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
                      ARM_CLIENT_ID: $(ARM_CLIENT_ID)
                      ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
                      ARM_TENANT_ID: $(ARM_TENANT_ID)


                  - task: TerraformInstaller@0
                    inputs:
                      terraformVersion: '1.9.8'



                  - task: Bash@3
                    displayName: 'Run Terraform Commands'
                    inputs:
                      targetType: 'inline'
                      script: |
                        cd terraform/Prod
                        pwd 
                        ls
                        terraform init -lock=false
                        terraform validate -no-color
                        terraform plan -no-color -input=false
                        terraform apply --auto-approve

                    env:
                        TF_VAR_TELEGRAM_BOT_TOKEN: $(TF_VAR_TELEGRAM_BOT_TOKEN)
                        TF_VAR_TELEGRAM_CHAT_ID: $(TF_VAR_TELEGRAM_CHAT_ID)
                        TF_VAR_DISCORD_WEBHOOK_URL: $(TF_VAR_DISCORD_WEBHOOK_URL)
                        TF_VAR_subscription_id: $(ARM_SUBSCRIPTION_ID)
                        TF_VAR_client_id: $(ARM_CLIENT_ID)
                        TF_VAR_client_secret: $(ARM_CLIENT_SECRET)
                        TF_VAR_tenant_id: $(ARM_TENANT_ID) 









